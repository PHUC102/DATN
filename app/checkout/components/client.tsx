"use client";

import { useCart } from "@/hooks/use-cart";
import { loadStripe, StripeElementsOptions } from "@stripe/stripe-js";
import { useRouter, useSearchParams } from "next/navigation";
import { useEffect, useState, useRef } from "react";
import toast from "react-hot-toast";
import { Elements } from "@stripe/react-stripe-js";
import { ImSpinner2 } from "react-icons/im";
import { CheckoutForm } from "./checkout-form";
import { AiOutlineCheckCircle } from "react-icons/ai";
import { Button } from "@/components/ui/button";
import Link from "next/link";

// ‚úÖ THAY n√∫t c≈© b·∫±ng FORM VNPAY m·ªõi
import PayWithVnpayForm from "./pay-with-vnpay-form";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY as string
);

// G·ªôp item gi·ªëng nhau theo ƒë√∫ng shape gi·ªè h√†ng (id + m√†u + size)
function groupCartItems(cartItems: any[]) {
  const grouped: Record<string, any> = {};
  cartItems.forEach((item) => {
    const key = `${item.id}-${item?.selectedImage?.color ?? ""}-${item?.selectedSize ?? ""}`;
    if (grouped[key]) grouped[key].quantity += item.quantity;
    else grouped[key] = { ...item };
  });
  return Object.values(grouped);
}

export const CheckoutClient = () => {
  const router = useRouter();
  const sp = useSearchParams();

  const {
    cartProducts,
    paymentIntent,
    handleSetPaymentIntent,
    clearWholeCart,
  } = useCart();

  const [error, setError] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [clientSecret, setClientSecret] = useState("");
  const [paymentSuccess, setPaymentSuccess] = useState(false);

  // k·∫øt qu·∫£ t·ª´ VNPAY (n·∫øu c√≥)
  const [vnpayStatus, setVnpayStatus] = useState<"success" | "failed" | null>(null);
  const [vnpayOrderId, setVnpayOrderId] = useState("");

  const hasFetchedRef = useRef(false);

  // Nh·∫≠n k·∫øt qu·∫£ VNPAY t·ª´ callback (?provider=vnpay&status=...&orderId=...)
  useEffect(() => {
    const provider = sp?.get("provider") ?? null;
    const status = sp?.get("status") ?? null;
    const orderId = sp?.get("orderId") ?? "";

    if (provider === "vnpay" && status) {
      hasFetchedRef.current = true;

      setVnpayStatus(status === "success" ? "success" : "failed");
      setVnpayOrderId(orderId);

      if (status === "success") {
        try {
          clearWholeCart();
          handleSetPaymentIntent(null);
        } catch {
          /* ignore */
        }
      } else {
        toast.error("Thanh to√°n VNPAY th·∫•t b·∫°i");
      }
      // KH√îNG replace ngay ƒë·ªÉ UI c√≤n hi·ªÉn th·ªã; c√≥ n√∫t "L√†m m·ªõi" b√™n d∆∞·ªõi
    }
  }, [sp, clearWholeCart, handleSetPaymentIntent]);

  // T·∫°o Stripe Payment Intent (khi ch∆∞a c√≥ k·∫øt qu·∫£ VNPAY)
  useEffect(() => {
    if (
      hasFetchedRef.current ||                // tr√°nh g·ªçi 2 l·∫ßn
      !cartProducts?.length ||                // gi·ªè tr·ªëng
      paymentSuccess ||                       // stripe ƒë√£ xong
      vnpayStatus                              // ƒëang hi·ªÉn th·ªã k·∫øt qu·∫£ vnpay
    ) return;

    hasFetchedRef.current = true;
    setIsLoading(true);
    setError(false);

    const groupedItems = groupCartItems(cartProducts);

    fetch("/api/create-payment-intent", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        items: groupedItems,
        payment_intent_id: paymentIntent,
      }),
    })
      .then((res) => {
        setIsLoading(false);
        if (res.status === 401) return router.push("/login");
        return res.json();
      })
      .then((data) => {
        if (data?.paymentIntent) {
          setClientSecret(data.paymentIntent.client_secret);
          handleSetPaymentIntent(data.paymentIntent.id);
        }
      })
      .catch(() => {
        setError(true);
        toast.error("ƒê√£ x·∫£y ra l·ªói!");
      });
  }, [cartProducts, paymentIntent, paymentSuccess, vnpayStatus, router, handleSetPaymentIntent]);

  const options: StripeElementsOptions = {
    clientSecret,
    appearance: { theme: "stripe", labels: "floating" },
  };

  return (
    <div className="w-full">
      {/* ======= K·∫æT QU·∫¢ TR·∫¢ V·ªÄ T·ª™ VNPAY ======= */}
      {vnpayStatus && (
        <div className="text-3xl flex flex-col items-center justify-center w-full h-full gap-4">
          <div>
            <h1 className="flex items-center gap-2">
              {vnpayStatus === "success" ? "Thanh to√°n th√†nh c√¥ng" : "Thanh to√°n th·∫•t b·∫°i"}
              {vnpayStatus === "success" && <AiOutlineCheckCircle className="text-green-500" />}
            </h1>
          </div>
          {vnpayOrderId && <div className="text-base">M√£ ƒë∆°n h√†ng: <b>{vnpayOrderId}</b></div>}
          <div className="flex gap-3">
            <Button><Link href="/orders">Xem ƒë∆°n ƒë·∫∑t h√†ng c·ªßa b·∫°n</Link></Button>
            <Button variant="outline" onClick={() => router.replace("/checkout")}>L√†m m·ªõi trang</Button>
          </div>
        </div>
      )}

      {/* ======= STRIPE CHECKOUT (n·∫øu kh√¥ng hi·ªÉn th·ªã k·∫øt qu·∫£ VNPAY) ======= */}
      {!vnpayStatus && clientSecret && cartProducts && !paymentSuccess && !error && (
        <div className="space-y-6">
          <Elements options={options} stripe={stripePromise}>
            <CheckoutForm
              clientSecret={clientSecret}
              handleSetPaymentSuccess={setPaymentSuccess}
            />
          </Elements>

          {/* NgƒÉn c√°ch 2 l·ª±a ch·ªçn */}
          <div className="flex items-center gap-3">
            <div className="h-px bg-gray-200 flex-1" />
            <span className="text-sm text-gray-500">ho·∫∑c</span>
            <div className="h-px bg-gray-200 flex-1" />
          </div>
        </div>
      )}

      {/* ======= FORM VNPAY (ƒë·ªôc l·∫≠p v·ªõi Stripe) ======= */}
      {!vnpayStatus && (cartProducts?.length ?? 0) > 0 && (
        <PayWithVnpayForm />
      )}

      {/* ======= C√ÅC TR·∫†NG TH√ÅI KH√ÅC ======= */}
      {!vnpayStatus && isLoading && (
        <div className="text-3xl flex flex-col items-center justify-center w-full h-full gap-3">
          <h1>ƒêang t·∫£i thanh to√°n...</h1>
          <ImSpinner2 className="animate-spin" />
        </div>
      )}

      {!vnpayStatus && error && (
        <div className="text-3xl flex items-center justify-center w-full h-full text-rose-500">
          <h1>ƒê√£ x·∫£y ra l·ªói! üòü</h1>
        </div>
      )}

      {!vnpayStatus && paymentSuccess && (
        <div className="text-3xl flex flex-col items-center justify-center w-full h-full gap-4">
          <h1 className="flex items-center gap-2">
            Thanh to√°n th√†nh c√¥ng
            <AiOutlineCheckCircle className="text-green-500" />
          </h1>
          <Button><Link href="/orders">Xem ƒë∆°n ƒë·∫∑t h√†ng c·ªßa b·∫°n</Link></Button>
        </div>
      )}

      {/* Ch·ªâ hi·ªán th√¥ng b√°o gi·ªè tr·ªëng khi th·∫≠t s·ª± kh√¥ng c√≥ g√¨ ƒë·ªÉ hi·ªÉn th·ªã */}
      {!vnpayStatus &&
        (!cartProducts || cartProducts.length === 0) &&
        !clientSecret &&
        !isLoading &&
        !error &&
        !paymentSuccess && (
          <div className="text-center text-gray-600 py-10">
            Gi·ªè h√†ng tr·ªëng ho·∫∑c thanh to√°n ch∆∞a s·∫µn s√†ng.
          </div>
        )}
    </div>
  );
};
